//-----------------------------------------------------------------------------
//	MATERIALSYSTEM.VPC
//
//	Project Script
//-----------------------------------------------------------------------------

$macro SRCDIR		".."
$Macro SHADERAPIDX9DIR "shaderapidx9"
$Macro SHADERLIBDIR "shaderlib"
$Macro STDSHADERSDIR "stdshaders"
$Macro OUTBINDIR	"$SRCDIR\..\game\bin"

$include "$SRCDIR\vpc_scripts\source_dll_base.vpc"

$IgnoreRedundancyWarning	"ON"

//-----------------------------------------------------------------------------

$CustomBuildStep "fp"  
{
	$CommandLine    "$(SCE_PS3_ROOT)\host-win32\Cg\bin\sce-cgc -quiet -profile sce_fp_rsx -o &quot;$(InputName).fpo&quot; &quot;$(InputPath)&quot;&#x0D;&#x0A;$(SCE_PS3_ROOT)\host-win32\ppu\bin\ppu-lv2-objcopy -I binary -O elf64-powerpc-celloslv2 -B powerpc &quot;$(InputName).fpo&quot; &quot;$(IntDir)\$(InputName).fp.ppu.o&quot;"
	$Description	"Fragment Program $(InputFileName) produces $(InputName).fpo produces $(InputName).fp.ppu.o"
	$Outputs		"$(IntDir)\$(InputName).fp.ppu.o"
}

$CustomBuildStep "vp"  
{
	$CommandLine    "$(SCE_PS3_ROOT)\host-win32\Cg\bin\sce-cgc -quiet -profile sce_vp_rsx -o &quot;$(InputName).vpo&quot; &quot;$(InputPath)&quot;&#x0D;&#x0A;$(SCE_PS3_ROOT)\host-win32\ppu\bin\ppu-lv2-objcopy -I binary -O elf64-powerpc-celloslv2 -B powerpc &quot;$(InputName).vpo&quot; &quot;$(IntDir)\$(InputName).vp.ppu.o&quot;"
	$Description	"Vertex Program $(InputFileName) produces $(InputName).vpo produces $(InputName).vp.ppu.o"
	$Outputs		"$(IntDir)\$(InputName).vp.ppu.o"
}

$Configuration
{
	$Compiler
	{
		$AdditionalIncludeDirectories	"$BASE;$SRCDIR\materialsystem"
		$AdditionalIncludeDirectories	"$BASE;$SRCDIR\dx9sdk\Include"			[$WINDOWS && !$GL]
		$PreprocessorDefinitions		"$BASE;DEFINE_MATERIALSYSTEM_INTERFACE;MATERIALSYSTEM_EXPORTS;PROTECTED_THINGS_ENABLE;INCLUDE_SCALEFORM"
		$PreprocessorDefinitions		"$BASE;VERSION_SAFE_STEAM_API_INTERFACES"
		$PreprocessorDefinitions		"$BASE;USE_ACTUAL_DX" [ $WINDOWS  && !$GL ]
		$PreprocessorDefinitions		"$BASE;GL_GLEXT_PROTOTYPES;DX_TO_GL_ABSTRACTION" [$GL]
		$PreprocessorDefinitions		"$BASE;strncpy=use_Q_strncpy_instead;_snprintf=use_Q_snprintf_instead" [!$POSIX]

		$EnableC++Exceptions			"Yes (/EHsc)"
		$Create/UsePCHThroughFile		"pch_materialsystem.h"
	}

	$Linker
	{
			$AdditionalLibraryDirectories   "$BASE;$SRCDIR\dx9sdk\lib" [$WINDOWS && !$GL]
			$AdditionalDependencies			"$BASE winmm.lib Ws2_32.lib imm32.lib oleaut32.lib" [$WINDOWS]
			$AdditionalDependencies			"$BASE dxguid.lib d3d9.lib" [$WINDOWS && !$GL]

	}

	// Since other shader modules are conglomerated here,
	// need to set project settings for those modules too:
	$Compiler [$OSXALL]
	{
		$AdditionalIncludeDirectories	"$BASE;..\"
		// shaderapidx9
		$PreprocessorDefinitions		"$BASE;SHADERAPIDX9;SHADER_DLL_EXPORT;"
		// shaderlib
		$PreprocessorDefinitions		"$BASE;FAST_MATERIALVAR_ACCESS;"
		// stdshader
		$AdditionalIncludeDirectories	"$BASE;$SRCDIR\materialsystem\stdshaders\fxctmp9;$SRCDIR\materialsystem\stdshaders\vshtmp9" [$OSXALL]
		$PreprocessorDefinitions		"$BASE;STDSHADER_DX9_DLL_EXPORT;FAST_MATERIALVAR_ACCESS"
		// platform override
		$PreprocessorDefinitions		"$BASE;PLATFORM_OVERRIDE_MATERIALSYSTEM"
	}
}

$Configuration "Debug"
{
	$Linker [$WINDOWS]
	{
		$AdditionalDependencies			"$BASE d3dx9d.lib" [!$GL]
	}
}

$Configuration "Release"
{
	$Linker [$WINDOWS]
	{
		$AdditionalDependencies			"$BASE d3dx9.lib"			[!$GL]
	}
}

$Configuration
{
	$Linker [$OSXALL]
	{
		$SystemFrameworks				"Carbon;OpenGL;Quartz;Cocoa;IOKit" 
		$SystemLibraries				"iconv;z"		
	}
}

///////////////////////////////////////////////
//
// PS3 conglomerates all shader modules here
//
$include "shaderapidx9/shaderapidx9_inc.vpc" [$OSXALL]
$include "shaderlib/shaderlib_inc.vpc" [$OSXALL]
$include "stdshaders/stdshader_dx9_inc.vpc" [$OSXALL]
//
//
///////////////////////////////////////////////

$Project "materialsystem"
{
	$Folder	"Source Files"
	{
		$File	"CColorCorrection.cpp"
		$File	"cmaterial.cpp"
		$File	"cmaterial_queuefriendly.cpp"
		$File	"CMaterialSubRect.cpp"
		$File	"cmaterialvar.cpp"
		$File	"cmatnullrendercontext.cpp"
		$File	"colorspace.cpp"
		$File	"ctexture.cpp"
		$File	"$SRCDIR\public\filesystem_helpers.cpp"
		$File	"imagepacker.cpp"
		$File	"mat_stub.cpp"
		$File	"materialsystem_global.cpp"
		$File	"morph.cpp"
		$File	"SubdMgr.cpp"
		$File	"occlusionquerymgr.cpp"
		$File	"shadersystem.cpp"
		$File	"texturemanager.cpp"
		$File	"composite_texture.cpp"
		$File	"custom_material.cpp"
		$File	"base_visuals_data_processor.cpp"

		$File	"pch_materialsystem.cpp"
		{
			$Configuration
			{
				$Compiler [!$LINUX && !$OSXALL]
				{
					$Create/UsePrecompiledHeader	"Create Precompiled Header (/Yc)"
				}
			}
		}

		$File	"cmaterialdict.cpp" \
				"cmaterialsystem.cpp" \
				"cmatlightmaps.cpp" \
				"cmatpaintmaps.cpp" \
				"cmatrendercontext.cpp" \
				"cmatqueuedrendercontext.cpp" 
	}

	$Folder	"Public Header Files"
	{
		$File	"$SRCDIR\public\tier0\basetypes.h"
		$File	"$SRCDIR\public\mathlib\bumpvects.h"
		$File	"$SRCDIR\public\const.h"
		$File	"$SRCDIR\public\tier1\convar.h"
		$File	"$SRCDIR\public\crtmemdebug.h"
		$File	"$SRCDIR\common\cstringhash.h"
		$File	"$SRCDIR\public\filesystem.h"
		$File	"$SRCDIR\public\appframework\iappsystem.h"
		$File	"$SRCDIR\public\materialsystem\IColorCorrection.h"
		$File	"$SRCDIR\public\materialsystem\imaterial.h"
		$File	"$SRCDIR\public\materialsystem\imaterialproxy.h"
		$File	"$SRCDIR\public\materialsystem\imaterialproxyfactory.h"
		$File	"$SRCDIR\public\materialsystem\imaterialsystem.h"
		$File	"$SRCDIR\public\materialsystem\imaterialsystemhardwareconfig.h"
		$File	"$SRCDIR\public\materialsystem\imaterialsystemstub.h"
		$File	"$SRCDIR\public\materialsystem\imaterialvar.h"
		$File	"$SRCDIR\public\materialsystem\imesh.h"
		$File	"$SRCDIR\public\materialsystem\imorph.h"
		$File	"$SRCDIR\public\materialsystem\ipaintmapdatamanager.h"
		$File	"$SRCDIR\public\tier1\interface.h"
		$File	"$SRCDIR\public\materialsystem\IShader.h"
		$File	"$SRCDIR\public\materialsystem\ishaderapi.h"
		$File	"$SRCDIR\public\materialsystem\itexture.h"
		$File	"$SRCDIR\public\materialsystem\ivisualsdataprocessor.h"
		$File	"$SRCDIR\public\materialsystem\icustommaterial.h"
		$File	"$SRCDIR\public\materialsystem\custommaterialowner.h"
		$File	"$SRCDIR\public\materialsystem\icompositetexture.h"
		$File	"$SRCDIR\public\materialsystem\icustommaterialmanager.h"
		$File	"$SRCDIR\public\materialsystem\icompositetexturegenerator.h"
		$File	"$SRCDIR\public\tier1\keyvalues.h"
		$File	"$SRCDIR\public\materialsystem\materialsystem_config.h"
		$File	"$SRCDIR\public\mathlib\mathlib.h"
		$File	"$SRCDIR\public\tier1\mempool.h"
		$File	"$SRCDIR\public\pixelwriter.h"
		$File	"$SRCDIR\public\renderparm.h"
		$File	"$SRCDIR\public\tier1\strtools.h"
		$File	"$SRCDIR\public\tier1\utlbuffer.h"
		$File	"$SRCDIR\public\tier1\utlmemory.h"
		$File	"$SRCDIR\public\tier1\utlrbtree.h"
		$File	"$SRCDIR\public\tier1\utlsymbol.h"
		$File	"$SRCDIR\public\tier1\utlvector.h"
		$File	"$SRCDIR\public\mathlib\vector.h"
		$File	"$SRCDIR\public\mathlib\vector2d.h"
		$File	"$SRCDIR\public\mathlib\vector4d.h"
		$File	"$SRCDIR\public\mathlib\vmatrix.h"
		$File	"$SRCDIR\public\mathlib\vplane.h"
		$File	"$SRCDIR\public\vstdlib\vstdlib.h"
		$File	"$SRCDIR\public\vtf\vtf.h"
		$File	"$SRCDIR\public\materialsystem\base_visuals_data_processor.h"
	}

	$Folder	"Header Files"
	{
		$File	"cmaterial_queuefriendly.h"
		$File	"cmaterialdict.h"
		$File	"cmaterialsystem.h"
		$File	"cmatlightmaps.h"
		$File	"cmatnullrendercontext.h"
		$File	"cmatpaintmaps.h"
		$File	"cmatqueuedrendercontext.h"
		$File	"cmatrendercontext.h"
		$File	"colorspace.h"
		$File	"IHardwareConfigInternal.h"
		$File	"imagepacker.h"
		$File	"imaterialinternal.h"
		$File	"imaterialsysteminternal.h"
		$File	"imatrendercontextinternal.h"
		$File	"imorphinternal.h"
		$File	"isubdinternal.h"
		$File	"itextureinternal.h"
		$File	"materialsystem_global.h"
		$File	"occlusionquerymgr.h"
		$File	"shader_dll_verify.h"		[$WINDOWS]
		$File	"shadersystem.h"
		$File	"texturemanager.h"	
		$File	"composite_texture.h"
		$File	"custom_material.h"
	}

	$Folder	"Link Libraries"
	{
		$Lib "bitmap"
		$Lib "mathlib"
		$Lib "shaderlib" [!$OSXALL]
		$Lib "tier2"
		$Lib "tier3"
		$Lib "vtf"
		$Lib "videocfg" [$OSXALL]
		$ImplibExternal	steam_api							[ ( $WIN32 || $POSIX ) && !$NO_STEAM ]
		$ImplibExternal	steam_api64							[ $WIN64 && !$NO_STEAM ]

		$Implib togl [!$IS_LIB_PROJECT && $GL && !$DEDICATED]
	}
}
